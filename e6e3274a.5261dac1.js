(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var r=n(2),o=n(6),a=(n(0),n(78)),c={title:"Render"},i={unversionedId:"api/render",id:"api/render",isDocsHomePage:!1,title:"Render",description:"configure()",source:"@site/docs/api/render.md",slug:"/api/render",permalink:"/docs/api/render",editUrl:"https://github.com/milesj/rut/edit/master/website/docs/api/render.md",version:"current",sidebar:"docs",previous:{title:"FAQ",permalink:"/docs/faq"},next:{title:"Result",permalink:"/docs/api/result"}},p=[{value:"<code>configure()</code>",id:"configure",children:[{value:"Options",id:"options",children:[]}]},{value:"<code>render()</code>",id:"render",children:[]},{value:"<code>renderAndWait()</code>",id:"renderandwait",children:[]}],l={rightToc:p};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"configure"},Object(a.b)("inlineCode",{parentName:"h2"},"configure()")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"configure(options: GlobalOptions): void")),Object(a.b)("p",null,"Define global options that will be used across all tests."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { configure } from 'rut-dom';\n\nconfigure({\n  strict: true,\n});\n")),Object(a.b)("h3",{id:"options"},"Options"),Object(a.b)("h4",{id:"debugger"},Object(a.b)("inlineCode",{parentName:"h4"},"debugger")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"DebugOptions")),Object(a.b)("p",null,"Debug options that will be applied to every ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/result#debug"}),Object(a.b)("inlineCode",{parentName:"a"},"debug()"))," call. Can override these\noptions on a per-call basis."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"configure({\n  debugger: {\n    reactElements: false,\n  },\n});\n")),Object(a.b)("h4",{id:"mockref"},Object(a.b)("inlineCode",{parentName:"h4"},"mockRef()")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"(element: React.ReactElement) => unknown")),Object(a.b)("p",null,"Mock a ref found within the current render tree. This mock function is passed the React element\nbeing referenced, for use in determining and providing a custom mock. For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { render } from 'rut-dom';\n\nconst spy = jest.fn();\nconst { root } = render<LoginFormProps>(<LoginForm />, {\n  mockRef(element) {\n    if (element.type === 'input' && element.props.type === 'password') {\n      return { onChange: spy };\n    }\n  },\n});\n\nroot.findOne('input').dispatch('onChange');\n\nexpect(spy).toHaveBeenCalled();\n")),Object(a.b)("h4",{id:"strict"},Object(a.b)("inlineCode",{parentName:"h4"},"strict")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"boolean")),Object(a.b)("p",null,"Wraps the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/result#root"}),"root")," element in ",Object(a.b)("inlineCode",{parentName:"p"},"React.StrictMode"),", logging all deprecations within\nthe current tree. Can be used in unison with the ",Object(a.b)("inlineCode",{parentName:"p"},"wrapper")," option below."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"render<ButtonProps>(<Button>Save</Button>, {\n  strict: true,\n});\n")),Object(a.b)("h4",{id:"wrapper"},Object(a.b)("inlineCode",{parentName:"h4"},"wrapper")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"React.ReactElement")),Object(a.b)("p",null,"Wraps the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/result#root"}),"root")," element in the provided React element. Useful for wrapping shared\nfunctionality across multiple test suites, like contexts. Can be used in unison with the ",Object(a.b)("inlineCode",{parentName:"p"},"strict"),"\noption above."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'function Wrapper({ children }: { children?: React.ReactNode }) {\n  return (\n    <ThemeContext.Provider value="dark">\n      <DirectionContext.Provider value="ltr">{children}</DirectionContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n\nrender<ButtonProps>(<Button>Save</Button>, {\n  wrapper: <Wrapper />,\n});\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"The wrapping component must render ",Object(a.b)("inlineCode",{parentName:"p"},"children"),".")),Object(a.b)("h2",{id:"render"},Object(a.b)("inlineCode",{parentName:"h2"},"render()")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"render<Props",">","(element: React.ReactElement, options?: RendererOptions): Result<Props",">")),Object(a.b)("p",null,"Accepts a React element and an optional ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"#configure"}),"options")," object, and returns a\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/result"}),"rendered result"),". This function is merely a wrapper around\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://reactjs.org/docs/test-renderer.html"}),"react-test-renderer"),", providing additional\nfunctionality, and an improved API."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { render } from 'rut-dom';\n\ntest('renders a button', () => {\n  const result = render<ButtonProps>(<Button>Save</Button>);\n});\n")),Object(a.b)("p",null,"If using TypeScript, it's highly encouraged to pass the props interface as a generic to ",Object(a.b)("inlineCode",{parentName:"p"},"render"),", so\nthat props, children, and other features can be typed correctly. This information is currently not\ninferrable as ",Object(a.b)("inlineCode",{parentName:"p"},"JSX.Element")," does not persist types."),Object(a.b)("p",null,"Furthermore, if the ",Object(a.b)("inlineCode",{parentName:"p"},"root")," is a host component (DOM element), you can apply props using the\n",Object(a.b)("inlineCode",{parentName:"p"},"InferComponentProps")," utility type. This isn't ",Object(a.b)("em",{parentName:"p"},"always necessary"),", only when prop information is\nrequired."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { render, InferComponentProps } from 'rut-dom';\n\ntest('renders a native button', () => {\n  const result = render<InferComponentProps<'button'>>(<button type=\"submit\">Save</button>);\n});\n")),Object(a.b)("h2",{id:"renderandwait"},Object(a.b)("inlineCode",{parentName:"h2"},"renderAndWait()")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"async renderAndWait<Props",">","(element: React.ReactElement, options?: RendererOptions):\nResult<Props",">")),Object(a.b)("p",null,"Works in a similar fashion to ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"#render"}),Object(a.b)("inlineCode",{parentName:"a"},"render()"))," but also waits for async calls within the\nmounting phase to complete before returning the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/result"}),"rendered result"),". Because of this, the\nfunction must be ",Object(a.b)("inlineCode",{parentName:"p"},"await"),"ed."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { renderAndWait } from 'rut-dom';\n\ntest('renders a user profile', async () => {\n  const result = await renderAndWait<UserProfileProps>(<UserProfile id={1} />);\n});\n")))}b.isMDXComponent=!0},78:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),b=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=b(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=b(n),d=r,m=s["".concat(c,".").concat(d)]||s[d]||u[d]||a;return n?o.a.createElement(m,i(i({ref:t},l),{},{components:n})):o.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);