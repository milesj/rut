(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(78)),l={title:"Result"},i={unversionedId:"api/result",id:"api/result",isDocsHomePage:!1,title:"Result",description:"The rendered result contains a handful of methods and properties for asserting against, they are:",source:"@site/docs/api/result.md",slug:"/api/result",permalink:"/docs/api/result",editUrl:"https://github.com/milesj/rut/edit/master/website/docs/api/result.md",version:"current",sidebar:"docs",previous:{title:"Render",permalink:"/docs/api/render"},next:{title:"Element",permalink:"/docs/api/element"}},c=[{value:"<code>root</code>",id:"root",children:[]},{value:"<code>debug()</code>",id:"debug",children:[{value:"Options",id:"options",children:[]}]},{value:"<code>rerender()</code>",id:"rerender",children:[]},{value:"<code>rerenderAndWait()</code>",id:"rerenderandwait",children:[]},{value:"<code>update()</code>",id:"update",children:[]},{value:"<code>updateAndWait()</code>",id:"updateandwait",children:[]},{value:"<code>unmount()</code>",id:"unmount",children:[]}],p={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The rendered result contains a handful of methods and properties for asserting against, they are:"),Object(o.b)("h2",{id:"root"},Object(o.b)("inlineCode",{parentName:"h2"},"root")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element<Props",">")),Object(o.b)("p",null,"The React element passed to ",Object(o.b)("inlineCode",{parentName:"p"},"render"),", represented as an ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/element"}),"Element")," instance. This is\nthe entry point into the entire rendered React tree."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const { root } = render<ButtonProps>(<Button>Save</Button>);\n\nexpect(root).toContainNode('Save'); // true\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"If either ",Object(o.b)("inlineCode",{parentName:"p"},"strict")," or ",Object(o.b)("inlineCode",{parentName:"p"},"wrapper")," options are defined, the ",Object(o.b)("inlineCode",{parentName:"p"},"root")," will still point to the element\ninitially passed in.")),Object(o.b)("h2",{id:"debug"},Object(o.b)("inlineCode",{parentName:"h2"},"debug()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Result#debug(options?: DebugOptions): string")),Object(o.b)("p",null,"Logs or returns a JSX representation of the ",Object(o.b)("em",{parentName:"p"},"reconciled")," React component tree. By default this will\nlog to the console."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const { debug } = render<ButtonProps>(<Button>Save</Button>);\n\ndebug();\n\nconst out = debug({ log: false });\n")),Object(o.b)("p",null,"The example above would log something similar to the following."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<Button>\n  <button type="button">Save</button>\n</Button>\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},'This function logs the reconciled tree. What this means is that exotic components, like context\nconsumers and providers, memo, fragments, and more, will not be shown. Only the "result" of the\nrender.')),Object(o.b)("h3",{id:"options"},"Options"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"children")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Render children. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"excludeComponents")," (",Object(o.b)("inlineCode",{parentName:"li"},"RegExp"),") - Exclude all components by name that match the regex pattern."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"excludeProps")," (",Object(o.b)("inlineCode",{parentName:"li"},"RegExp"),") - Exclude all props by name that match the regex pattern."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"falsy")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Include falsy props in the output. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"false"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"groupProps")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Group props into the following: key & ref, truthy booleans, everything\nelse, event handlers. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"hostElements")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Include host elements (DOM) in the output. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"keyAndRef")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Include ",Object(o.b)("inlineCode",{parentName:"li"},"key")," and ",Object(o.b)("inlineCode",{parentName:"li"},"ref")," props in the output. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"log")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Log to the console automatically. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"maxLength")," (",Object(o.b)("inlineCode",{parentName:"li"},"number"),") - Max length of arrays and objects before truncating. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"5"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"reactElements")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Include React elements in the output. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"sortProps")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Sort the props within each grouping from A-Z. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),".")),Object(o.b)("h2",{id:"rerender"},Object(o.b)("inlineCode",{parentName:"h2"},"rerender()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"SyncResult#rerender(element: React.ReactElement<Props",">",", options?: RendererOptions):\nElement<Props",">")),Object(o.b)("p",null,"Re-render the in-memory tree with an updated ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#root"}),"root")," element and optional options, and return\nthe new root element. This is a perfect opportunity to update or replace the ",Object(o.b)("inlineCode",{parentName:"p"},"wrapper")," element."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'const { root, rerender } = render<InputProps>(<Input name="email" />, {\n  wrapper: <Form method="GET" />,\n});\n\n// Change props and wrapper\nconst newRoot = rerender(<Input name="email" id="email" />, {\n  wrapper: <Form method="POST" />,\n});\n')),Object(o.b)("p",null,"If you don't destructure the result, you may use the ",Object(o.b)("inlineCode",{parentName:"p"},"root")," on the initial returned result, instead\nof using the new root, as the instance is preserved."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'const result = render<InputProps>(<Input name="email" />, {\n  wrapper: <Form method="GET" />,\n});\n\nresult.rerender(<Input name="email" id="email" />, {\n  wrapper: <Form method="POST" />,\n});\n\nresult.root; // Latest\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This method is not available when using ",Object(o.b)("inlineCode",{parentName:"p"},"renderAndWait()"),".")),Object(o.b)("h2",{id:"rerenderandwait"},Object(o.b)("inlineCode",{parentName:"h2"},"rerenderAndWait()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"async AsyncResult#rerenderAndWait(element: React.ReactElement<Props",">",", options?: RendererOptions):\nPromise<Element<Props",">",">")),Object(o.b)("p",null,"Like ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#rerender"}),Object(o.b)("inlineCode",{parentName:"a"},"rerender()"))," but also awaits the re-render so that async calls have time to\nfinish."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'const { root, rerenderAndWait } = await renderAndWait<InputProps>(<Input name="email" />, {\n  wrapper: <Form method="GET" />,\n});\n\n// Change props and wrapper\nconst newRoot = await rerenderAndWait(<Input name="email" id="email" />, {\n  wrapper: <Form method="POST" />,\n});\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This method is not available when using ",Object(o.b)("inlineCode",{parentName:"p"},"render()"),".")),Object(o.b)("h2",{id:"update"},Object(o.b)("inlineCode",{parentName:"h2"},"update()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Result#update(newProps?: Partial<Props",">",", newChildren?: React.ReactNode): void")),Object(o.b)("p",null,"Can be used to update the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#root"}),"root"),"'s props or children. When passing no arguments, will\nre-render the element with current props and children (useful for testing cache and conditionals)."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'const { update } = render<ButtonProps>(<Button type="button">Save</Button>);\n\nupdate(); // Re-render\n')),Object(o.b)("p",null,"Otherwise, accepts an object of partial props as the first argument, or a new child as the second.\nCan be used separately or together."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"// Change `type` prop\nupdate({ type: 'submit' });\n\n// Change children\nupdate({}, <span>Submit</span>);\n\n// Change both\nupdate({ type: 'submit' }, <span>Submit</span>);\n")),Object(o.b)("h2",{id:"updateandwait"},Object(o.b)("inlineCode",{parentName:"h2"},"updateAndWait()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"async Result#updateAndWait(newProps?: Partial<Props",">",", newChildren?: React.ReactNode):\nPromise<void",">")),Object(o.b)("p",null,"Like ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#update"}),Object(o.b)("inlineCode",{parentName:"a"},"update()"))," but waits for async calls within the updating phase to complete before\nreturning the re-rendered result. Because of this, the function must be ",Object(o.b)("inlineCode",{parentName:"p"},"await"),"ed."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const { root, updateAndWait } = render<UserListProps>(<UserList />);\n\nexpect(root.find(User)).toHaveLength(10);\n\nawait updateAndWait({ filters: { inactive: true } });\n\nexpect(root.find(User)).toHaveLength(3);\n")),Object(o.b)("h2",{id:"unmount"},Object(o.b)("inlineCode",{parentName:"h2"},"unmount()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Result#unmount(): void")),Object(o.b)("p",null,"Like the name states, this triggers an unmount. This isn't necessary to call in every test, just\nwhen you want to test the unmounting phase."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const { unmount } = render<ButtonProps>(<Button>Save</Button>);\n\nunmount();\n")))}b.isMDXComponent=!0},78:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=b(n),s=a,m=u["".concat(l,".").concat(s)]||u[s]||d[s]||o;return n?r.a.createElement(m,i(i({ref:t},p),{},{components:n})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=s;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);