(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{69:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),o=(n(0),n(90)),i={title:"Element"},c={unversionedId:"api/element",id:"api/element",isDocsHomePage:!1,title:"Element",description:"An Element is a wrapper around a React element (more specifically a",source:"@site/docs/api/element.md",slug:"/api/element",permalink:"/docs/api/element",editUrl:"https://github.com/milesj/rut/edit/master/website/docs/api/element.md",version:"current",sidebar:"docs",previous:{title:"Result",permalink:"/docs/api/result"},next:{title:"ESLint",permalink:"/docs/tooling/eslint"}},l=[{value:"<code>debug()</code>",id:"debug",children:[]},{value:"<code>dispatch()</code>",id:"dispatch",children:[{value:"Options",id:"options",children:[]}]},{value:"<code>dispatchAndWait()</code>",id:"dispatchandwait",children:[]},{value:"<code>find()</code>",id:"find",children:[]},{value:"<code>findAt()</code>",id:"findat",children:[]},{value:"<code>findOne()</code>",id:"findone",children:[]},{value:"<code>name()</code>",id:"name",children:[]},{value:"<code>query()</code>",id:"query",children:[{value:"Options",id:"options-1",children:[]}]},{value:"<code>ref()</code>",id:"ref",children:[]}],p={toc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"An ",Object(o.b)("inlineCode",{parentName:"p"},"Element")," is a wrapper around a React element (more specifically a\n",Object(o.b)("a",{parentName:"p",href:"https://reactjs.org/docs/test-renderer.html"},"test instance"),") that hides implementation details and\nis primarily used for traversing the React tree. It can be accessed via the ",Object(o.b)("a",{parentName:"p",href:"/docs/api/result#root"},"root"),"\nor when finding/querying through another ",Object(o.b)("inlineCode",{parentName:"p"},"Element")," instance."),Object(o.b)("h2",{id:"debug"},Object(o.b)("inlineCode",{parentName:"h2"},"debug()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#debug(options?: DebugOptions): string")),Object(o.b)("p",null,"Like the rendered result ",Object(o.b)("a",{parentName:"p",href:"/docs/api/result#debug"},Object(o.b)("inlineCode",{parentName:"a"},"debug()"))," but only represents the current element\ntree."),Object(o.b)("h2",{id:"dispatch"},Object(o.b)("inlineCode",{parentName:"h2"},"dispatch()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#dispatch(name: EventType, event?: React.SyntheticEvent | EventOptions, options?:\nDispatchOptions): this")),Object(o.b)("p",null,"Dispatch an event for the defined event handler. Accepts a ",Object(o.b)("inlineCode",{parentName:"p"},"SyntheticEvent"),", an event options\nobject, or nothing (will create an event behind the scenes). To ease integration, Rut provides a\n",Object(o.b)("a",{parentName:"p",href:"/docs/mocks"},Object(o.b)("inlineCode",{parentName:"a"},"mockSyntheticEvent()"))," function."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import { render, mockSyntheticEvent } from 'rut-dom';\n\nconst { root } = render<LoginFormProps>(<LoginForm />);\n\n// Event created internally\nroot.findOne('input').dispatch('onChange');\n\n// Event created internally and passed custom options\nroot.findOne('input').dispatch('onChange', { target: { value: 'foo' } });\n\n// Custom event provided\nroot\n  .findOne('input')\n  .dispatch('onChange', mockSyntheticEvent('onChange', { target: { value: 'foo' } }));\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This may only be executed on host components (DOM elements). Why? Because it's an abstraction that\nforces testing on what the consumer will ultimately interact with. Executing handlers on a React\ncomponent is a code smell.")),Object(o.b)("h3",{id:"options"},"Options"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"propagate")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Propagate the event up or down the tree by executing the same handler on\nevery element until hitting the root, leaf, or the event has been stopped. ",Object(o.b)("em",{parentName:"li"},"(Experimental)"))),Object(o.b)("h2",{id:"dispatchandwait"},Object(o.b)("inlineCode",{parentName:"h2"},"dispatchAndWait()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"async Element#dispatchAndWait(name: EventType, event?: React.SyntheticEvent | EventOptions,\noptions?: DispatchOptions): Promise<void",">")),Object(o.b)("p",null,"Like ",Object(o.b)("a",{parentName:"p",href:"#dispatch"},Object(o.b)("inlineCode",{parentName:"a"},"dispatch()"))," but waits for async calls within the dispatch and updating phase to\ncomplete before returning the re-rendered result. Because of this, the function must be ",Object(o.b)("inlineCode",{parentName:"p"},"await"),"ed."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import { render } from 'rut-dom';\n\nit('waits for update call to finish', async () => {\n  const { root } = render<EditProfileProps>(<EditProfile id={1} onSubmit={updateUser} />);\n\n  await root.findOne('form').dispatchAndWait('onSubmit');\n});\n")),Object(o.b)("h2",{id:"find"},Object(o.b)("inlineCode",{parentName:"h2"},"find()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#find<T extends HostComponentType, P extends InferComponentProps<T",">",">","(type: T, props?:\nPartial<P",">","): Element<T",">","[]")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#find<T extends React.ComponentType, P extends InferComponentProps<T",">",">","(type: T, props?:\nPartial<P",">","): Element<T",">","[]")),Object(o.b)("p",null,"Search through the current tree for all elements that match the defined React component or HTML tag.\nIf any are found, a list of ",Object(o.b)("inlineCode",{parentName:"p"},"Element"),"s is returned.\n",Object(o.b)("a",{parentName:"p",href:"/docs/caveats"},"A caveat exists for this method"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"const { root } = render<NewsReelProps>(<NewsReel />);\n\n// By component\nconst articles = root.find(NewsArticle);\n\n// By HTML tag\nconst articles = root.find('article');\n")),Object(o.b)("p",null,"Also accepts a partial props object as a 2nd argument. When defined, will further filter elements\nand only return those that have the defined props in common."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},'const { root } = render(\n  <form>\n    <input type="text" name="name" />\n    <input type="email" name="email" />\n    <input type="password" name="password" />\n  </form>,\n);\n\nconst input = root.find(\'input\', { name: \'email\' }); // 1\n')),Object(o.b)("h2",{id:"findat"},Object(o.b)("inlineCode",{parentName:"h2"},"findAt()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#findAt<T extends HostComponentType, P extends InferComponentProps<T",">",">","(type: T, at:\n'first' | 'last' | number, props?: Partial<P",">","): Element<T",">")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#findAt<T extends React.ComponentType, P extends InferComponentProps<T",">",">","(type: T, at:\n'first' | 'last' | number, props?: Partial<P",">","): Element<T",">")),Object(o.b)("p",null,"Like ",Object(o.b)("a",{parentName:"p",href:"#find"},Object(o.b)("inlineCode",{parentName:"a"},"find()"))," but returns the element at the defined index. Accepts shorthand ",Object(o.b)("inlineCode",{parentName:"p"},"first")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"last")," indices, or a numerical index. If no element is found, an error is thrown."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},'const { root } = render(\n  <form>\n    <input type="text" name="name" />\n    <input type="text" name="email" />\n    <input type="text" name="password" />\n  </form>,\n);\n\nconst name = root.findAt(\'input\', \'first\');\nconst email = root.findAt(\'input\', 1);\nconst password = root.findAt(\'input\', \'last\');\n')),Object(o.b)("h2",{id:"findone"},Object(o.b)("inlineCode",{parentName:"h2"},"findOne()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#findOne<T extends HostComponentType, P extends InferComponentProps<T",">",">","(type: T, props?:\nPartial<P",">","): Element<T",">")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#findOne<T extends React.ComponentType, P extends InferComponentProps<T",">",">","(type: T,\nprops?: Partial<P",">","): Element<T",">")),Object(o.b)("p",null,"Like ",Object(o.b)("a",{parentName:"p",href:"#find"},Object(o.b)("inlineCode",{parentName:"a"},"find()"))," but only returns a single instance. If no elements are found, or too many\nelements are found, an error is thrown."),Object(o.b)("h2",{id:"name"},Object(o.b)("inlineCode",{parentName:"h2"},"name()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#name(jsx: boolean = false): string")),Object(o.b)("p",null,"Returns the name of the component (most commonly from ",Object(o.b)("inlineCode",{parentName:"p"},"displayName"),"). If a component has been\nwrapped with an HOC, it will attempt to preserve the name."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"const { root } = render<ButtonProps>(<Button />);\n\nexpect(root.name()).toBe('Button');\nexpect(root.name(true)).toBe('<Button />');\n")),Object(o.b)("h2",{id:"query"},Object(o.b)("inlineCode",{parentName:"h2"},"query()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#query<T extends ElementType",">","(predicate: Predicate | ((node: TestNode, fiber: FiberNode)\n=> boolean), options?: QueryOptions): Element<T",">","[]")),Object(o.b)("p",null,"A low-level abstraction for querying and finding components in the current tree using a predicate\nfunction. This predicate is passed the ",Object(o.b)("inlineCode",{parentName:"p"},"react-rest-renderer")," test instance and a ",Object(o.b)("inlineCode",{parentName:"p"},"react")," fiber node,\nfor use in comparisons. To simplify this process, a ",Object(o.b)("a",{parentName:"p",href:"/docs/predicates"},"predicate")," can be used."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"const { root } = render<NewsReelProps>(<NewsReel />);\n\nconst articles = root.query((node) => node.type === NewsArticle);\n")),Object(o.b)("h3",{id:"options-1"},"Options"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"deep")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),") - Continue searching through the entire tree when a match is found, otherwise\nreturn the found result immediately. Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),".")),Object(o.b)("h2",{id:"ref"},Object(o.b)("inlineCode",{parentName:"h2"},"ref()")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Element#ref<T",">","(name?: string): T | null")),Object(o.b)("p",null,"Returns any ref associated with the current component. The renderer will attempt to find a valid ref\nusing the following patterns, in order:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If a ref is found on the internal React fiber node, it will be used."),Object(o.b)("li",{parentName:"ul"},"If defined as a class component instance property (either via ",Object(o.b)("inlineCode",{parentName:"li"},"React.createRef()")," or a callback\nref), will match against the ",Object(o.b)("inlineCode",{parentName:"li"},"name")," provided."),Object(o.b)("li",{parentName:"ul"},"If defined as a string ref, will match against the ",Object(o.b)("inlineCode",{parentName:"li"},"name")," provided."),Object(o.b)("li",{parentName:"ul"},"Otherwise ",Object(o.b)("inlineCode",{parentName:"li"},"null")," is returned.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"class Input extends React.Component<InputProps> {\n  inputRef = React.createRef<HTMLInputElement>();\n\n  render() {\n    return <input type=\"text\" ref={this.inputRef} />;\n  }\n}\n\nconst { root } = render<InputProps>(<Input />);\n\nroot.ref('inputRef'); // <input />\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Be sure to mock your ref using the ",Object(o.b)("a",{parentName:"p",href:"/docs/api/render#mockref"},Object(o.b)("inlineCode",{parentName:"a"},"mockRef()"))," option.")))}s.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return n?r.a.createElement(m,c(c({ref:t},p),{},{components:n})):r.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);